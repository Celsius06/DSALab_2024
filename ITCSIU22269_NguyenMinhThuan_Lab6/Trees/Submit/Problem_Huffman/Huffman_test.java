package Trees.Submit.Problem_Huffman;

import java.util.*;

public class Huffman_test {

    // recursive function to print the
    // huffman-code through the tree traversal.
    // Here s is the huffman - code generated.
    public static void printCode(HuffmanNode root, String s) {

        // base case; if the left and right are null
        // then its a leaf node and we print
        // the code s generated by traversing the tree.
        if (root.left == null && root.right == null
                && Character.isDefined(root.c)) {

            // c is the character in the node
            System.out.println(root.c + ": " + s);

            return;
        }

        // if we go to left then add "0" to the code.
        // if we go to the right add "1" to the code.

        // recursive calls for left and
        // right sub-tree of the generated tree.
        printCode(root.left, s + "0");
        printCode(root.right, s + "1");
    }

    // main function
    public static void main(String[] args) {
        String inputString = "I am a student at International University. My name is Nguyen Minh Thuan. I am working on a DSA lab";
        System.out.println(
                "Given string: I am a student at International University. My name is Nguyen Minh Thuan. I am working on a DSA lab");
        // Calculate frequencies of each character
        Map<Character, Integer> charFreq = new HashMap<>();
        for (char c : inputString.toCharArray()) {
            charFreq.put(c, charFreq.getOrDefault(c, 0) + 1);
        }

        // Creating a priority queue q.
        // Makes a min-priority queue(min-heap).
        PriorityQueue<HuffmanNode> q = new PriorityQueue<>(charFreq.size(), new MyComparator());

        // Populate the priority queue with characters and frequencies
        for (Map.Entry<Character, Integer> entry : charFreq.entrySet()) {
            // Creating a Huffman node object
            // and add it to the priority queue.
            HuffmanNode hn = new HuffmanNode();

            hn.c = entry.getKey();
            hn.data = entry.getValue();

            hn.left = null;
            hn.right = null;

            // Add the Huffman node to the queue.
            q.add(hn);
        }

        // Create a root node
        HuffmanNode root = null;

        // Here we will extract the two minimum value
        // from the heap each time until
        // its size reduces to 1, extract until
        // all the nodes are extracted.
        while (q.size() > 1) {

            // First min extract.
            HuffmanNode x = q.peek();
            q.poll();

            // Second min extract.
            HuffmanNode y = q.peek();
            q.poll();

            // New node f which is equal
            HuffmanNode f = new HuffmanNode();

            // To the sum of the frequency of the two nodes
            // assigning values to the f node.
            f.data = x.data + y.data;
            f.c = '-';

            // First extracted node as left child.
            f.left = x;

            // Second extracted node as the right child.
            f.right = y;

            // Marking the f node as the root node.
            root = f;

            // Add this node to the priority-queue.
            q.add(f);
        }

        // Print the frequencies of each character
        System.out.println("Character frequencies: ");
        for (Map.Entry<Character, Integer> entry : charFreq.entrySet()) {
            System.out.println(entry.getKey() + ": " + entry.getValue());
        }

        // Print the codes by traversing the tree
        System.out.println("\nHuffman codes: ");
        printCode(root, "");
    }
}

// Node class is the basic structure
// of each node present in the Huffman - tree.
class HuffmanNode {

    int data;
    char c;

    HuffmanNode left;
    HuffmanNode right;
}

// Comparator class helps to compare the node
// on the basis of one of its attribute.
// Here we will be compared
// on the basis of data values of the nodes.
class MyComparator implements Comparator<HuffmanNode> {
    public int compare(HuffmanNode x, HuffmanNode y) {

        return x.data - y.data;
    }
}
